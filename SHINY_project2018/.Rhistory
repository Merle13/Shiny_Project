CCC = rbind(xyy, xye)
OOO = rbind(eyx, yyx)
leaflet_citibike_start = leaflet(data = OOO) %>%
addProviderTiles("Esri.WorldTopoMap") %>%
addMarkers(lng = OOO$start.station.longitude,
lat = OOO$start.station.latitude)
leaflet_citibike_start
saveRDS(CCC, "EndStation.RDS")
saveRDS(OOO, "StartStation.RDS")
getColor <- function(CCC) {
sapply(CCC$Color, function(Color) {
if(Color == "L") {
"green"
} else {
"red"
} })
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(CCC)
)
leaflet(CCC) %>% addProviderTiles("Esri.WorldTopoMap") %>%
addAwesomeMarkers(lng = OOO$start.station.longitude,
lat = OOO$start.station.latitude, icon=icons,
label=~as.character(Color))
View(CCC)
getColor <- function(CCC) {
sapply(CCC$Color, function(Color) {
if(Color == "M") {
"red"
} else {
"green"
} })
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(CCC)
)
leaflet(CCC) %>% addProviderTiles("Esri.WorldTopoMap") %>%
addAwesomeMarkers(lng = OOO$start.station.longitude,
lat = OOO$start.station.latitude, icon=icons,
label=~as.character(Color))
getColor <- function(CCC) {
sapply(CCC$Color, function(Color) {
if(Color == "M") {
"red"
} else {
"green"
} })
}
getColor(CCC)
leaflet_citibike_end = leaflet(data = CCC) %>%
addProviderTiles("Esri.WorldTopoMap") %>%
addMarkers(lng = CCC$end.station.longitude,
lat = CCC$end.station.latitude)
leaflet_citibike_end
getColor <- function(CCC) {
sapply(CCC$Color, function(Color) {
if(Color == "M") {
"red"
} else {
"green"
} })
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(CCC)
)
leaflet(CCC) %>% addProviderTiles("Esri.WorldTopoMap") %>%
addAwesomeMarkers(lng = OOO$start.station.longitude,
lat = OOO$start.station.latitude, icon=icons,
label=~as.character(Color))
nmx = getColor(CCC)
getColor <- function(CCC) {
sapply(CCC$Color, function(Color) {
if(Color == "M") {
"red"
} else {
"green"
} })
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(CCC)
)
leaflet(CCC) %>% addProviderTiles("Esri.WorldTopoMap") %>%
addAwesomeMarkers(lng = CCC$start.station.longitude,
lat = CCC$start.station.latitude, icon=icons,
label=~as.character(Color))
runApp('Desktop/Shiny_Project/SHINY_project2018')
runApp('Desktop/Shiny_Project/SHINY_project2018')
CCC$start.station.longitude
getColor <- function(CCC) {
sapply(CCC$Color, function(Color) {
if(Color == "M") {
"red"
} else {
"green"
} })
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(CCC)
)
leaflet(CCC) %>% addProviderTiles("Esri.WorldTopoMap") %>%
addAwesomeMarkers(lng = CCC$end.station.longitude,
lat = CCC$end.station.latitude, icon=icons,
label=~as.character(Color))
getColor <- function(CCC) {
sapply(CCC$Color, function(Color) {
if(Color == "M") {
"red"
} else {
"green"
} })
}
icons <- awesomeIcons(
markerColor = getColor(CCC)
)
leaflet(CCC) %>% addProviderTiles("Esri.WorldTopoMap") %>%
addAwesomeMarkers(lng = CCC$end.station.longitude,
lat = CCC$end.station.latitude, icon=icons,
label=~as.character(Color))
getColor <- function(CCC) {
sapply(CCC$Color, function(Color) {
if(Color == "M") {
"red"
} else {
"green"
} })
}
icons <- awesomeIcons(
icon = 'bicycle',
iconColor = 'black',
library = 'ion',
markerColor = getColor(CCC)
)
leaflet(CCC) %>% addProviderTiles("Esri.WorldTopoMap") %>%
addAwesomeMarkers(lng = CCC$end.station.longitude,
lat = CCC$end.station.latitude, icon=icons,
label=~as.character(Color))
icons <- awesomeIcons(
icon = 'bicycle',
iconColor = 'black',
library = 'ion',
markerColor = getColor(CCC)
)
View(icons)
getColor <- function(CCC) {
sapply(CCC$Color, function(Color) {
if(Color == "M") {
"red"
} else {
"green"
} })
}
icons <- awesomeIcons(
icon = 'bicycle',
iconColor = 'black',
library = 'ion',
markerColor = "green" #getColor(CCC)
)
leaflet(CCC) %>% addProviderTiles("Esri.WorldTopoMap") %>%
addAwesomeMarkers(lng = CCC$end.station.longitude,
lat = CCC$end.station.latitude, icon=icons,
label=~as.character(Color))
getColor <- function(CCC) {
sapply(CCC$Color, function(Color) {
if(Color == "M") {
"pink"
} else {
"green"
} })
}
icons <- awesomeIcons(
icon = 'bicycle',
iconColor = 'black',
library = 'ion',
markerColor = getColor(CCC)
)
leaflet(CCC) %>% addProviderTiles("Esri.WorldTopoMap") %>%
addAwesomeMarkers(lng = CCC$end.station.longitude,
lat = CCC$end.station.latitude, icon=icons,
label=~as.character(Color))
getColor <- function(CCC) {
sapply(CCC$Color, function(Color) {
if(Color == "M") {
"blue"
} else {
"green"
} })
}
icons <- awesomeIcons(
icon = 'bicycle',
iconColor = 'black',
library = 'ion',
markerColor = getColor(CCC)
)
leaflet(CCC) %>% addProviderTiles("Esri.WorldTopoMap") %>%
addAwesomeMarkers(lng = CCC$end.station.longitude,
lat = CCC$end.station.latitude, icon=icons,
label=~as.character(Color))
getColor <- function(CCC) {
sapply(CCC$Color, function(Color) {
if(CCC$Color == "M") {
"red"
} else {
"green"
} })
}
icons <- awesomeIcons(
icon = 'bicycle',
iconColor = 'black',
library = 'ion',
markerColor = getColor(CCC)
)
leaflet(CCC) %>% addProviderTiles("Esri.WorldTopoMap") %>%
addAwesomeMarkers(lng = CCC$end.station.longitude,
lat = CCC$end.station.latitude, icon=icons,
label=~as.character(Color))
nmx
getColor <- function(CCC) {
sapply(CCC$Color, function(Color) {
if(CCC$Color == "M") {
"red"
} else {
"green"
} })
}
icons <- awesomeIcons(
icon = 'bicycle',
iconColor = 'black',
library = 'ion',
markerColor = c("blue", "green")
)
leaflet(CCC) %>% addProviderTiles("Esri.WorldTopoMap") %>%
addAwesomeMarkers(lng = CCC$end.station.longitude,
lat = CCC$end.station.latitude, icon=icons,
label=~as.character(Color))
class(nmx)
icons <- awesomeIcons(
icon = 'bicycle',
iconColor = 'black',
library = 'ion',
markerColor = nmx
)
leaflet(CCC) %>% addProviderTiles("Esri.WorldTopoMap") %>%
addAwesomeMarkers(lng = CCC$end.station.longitude,
lat = CCC$end.station.latitude, icon=icons,
label=~as.character(Color))
icons <- awesomeIcons(
icon = 'bicycle',
iconColor = 'black',
library = 'ion',
markerColor = unname(nmx)
)
leaflet(CCC) %>% addProviderTiles("Esri.WorldTopoMap") %>%
addAwesomeMarkers(lng = CCC$end.station.longitude,
lat = CCC$end.station.latitude, icon=icons,
label=~as.character(Color))
getColor <- function(CCC) {
unname(sapply(CCC$Color, function(Color) {
if(Color == "M") {
"red"
} else {
"green"
} }))
}
icons <- awesomeIcons(
icon = 'bicycle',
iconColor = 'black',
library = 'ion',
markerColor = getColor(CCC)
)
leaflet(CCC) %>% addProviderTiles("Esri.WorldTopoMap") %>%
addAwesomeMarkers(lng = CCC$end.station.longitude,
lat = CCC$end.station.latitude, icon=icons,
label=~as.character(Color))
runApp('Desktop/Shiny_Project/SHINY_project2018')
getColor <- function(OOO) {
unname(sapply(OOO$Color, function(Color) {
if(Color == "M") {
"red"
} else {
"green"
} }))
}
icons <- awesomeIcons(
icon = 'bicycle',
iconColor = 'black',
library = 'ion',
markerColor = getColor(OOO)
)
leaflet(OOO) %>% addProviderTiles("Esri.WorldTopoMap") %>%
addAwesomeMarkers(lng = OOO$start.station.longitude,
lat = OOO$start.station.latitude, icon=icons,
label=~as.character(Color))
runApp('Desktop/Shiny_Project/SHINY_project2018')
runApp('Desktop/Shiny_Project/SHINY_project2018')
runApp('Desktop/Shiny_Project/SHINY_project2018')
saveRDS(OOO, "StartStation.RDS")
runApp('Desktop/Shiny_Project/SHINY_project2018')
runApp('Desktop/Shiny_Project/SHINY_project2018')
readRDS("EndStation.RDS")
runApp('Desktop/Shiny_Project/SHINY_project2018')
runApp('Desktop/Shiny_Project/SHINY_project2018')
runApp('Desktop/Shiny_Project/SHINY_project2018')
runApp('Desktop/Shiny_Project/SHINY_project2018')
runApp('Desktop/Shiny_Project/SHINY_project2018')
runApp('Desktop/Shiny_Project/SHINY_project2018')
runApp('Desktop/Shiny_Project/SHINY_project2018')
install.packages("geosphere")
library(geosphere)
distnc = distm (c(Citi_Bike_717$start.station.longitude, Citi_Bike_717$start.station.latitude), c(Citi_Bike_717$end.station.longitude, Citi_Bike_717$end.station.latitude), fun = distHaversine)
library(dplyr)
station_coord = Citi_Bike_717 %>% select(., Station = start.station.name, Lat = start.station.latitude, long = start.station.longitude)
station_coord = Citi_Bike_717 %>% select(., Station = start.station.name,
Lat = start.station.latitude,
long = start.station.longitude) %>%
distinct()
routes_map = rbind(
data.frame(routes) %>%
rename(., Station = start.station.name) %>%
tibble::rowid_to_column(var = 'group') %>%
inner_join(station_coord, by = "Station") %>%
select(., group, Lat, long),
data.frame(routes) %>%
rename(., Station = end.station.name) %>%
tibble::rowid_to_column(var = 'group') %>%
inner_join(station_coord, by = "Station") %>%
select(., group, Lat, long)
)
routes = readRDS("routes.RDS")
routes = readRDS("routes.RDS")
setwd("~/Desktop/Shiny_Project/SHINY_project2018")
routes = readRDS("routes.RDS")
routes_map = rbind(
data.frame(routes) %>%
rename(., Station = start.station.name) %>%
tibble::rowid_to_column(var = 'group') %>%
inner_join(station_coord, by = "Station") %>%
select(., group, Lat, long),
data.frame(routes) %>%
rename(., Station = end.station.name) %>%
tibble::rowid_to_column(var = 'group') %>%
inner_join(station_coord, by = "Station") %>%
select(., group, Lat, long)
)
routes_map %>% filter(group > 10)
routes_map %>% filter(group < 10)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(routes)
View(station_coord)
runApp()
runApp()
View(Citi_Bike_717)
runApp()
runApp()
runApp()
View(routes_map)
View(routes_map)
View(routes)
routes %>% select(., start.station.name, end.station.name) %>% head(., 40) %>% distinct()
yyy = routes %>% select(., start.station.name, end.station.name) %>%
head(., 40) %>% distinct()
yyy = Citi_Bike_717 %>% select(., start.station.name, end.station.name) %>%
head(., 40) %>% distinct()
View(yyy)
yyy = Citi_Bike_717 %>% select(., start.station.name, end.station.name, start.station.latitude,
start.station.longitude, end.station.latitude, end.station.longitude) %>%
head(., 40) %>% distinct()
View(yyy)
StartYYY = yyy %>% select(., start.station.name, start.station.latitude, start.station.longitude)
EndYYY = yyy %>% select(., end.station.name, end.station.latitude, end.station.longitude)
StartYYY = yyy %>% select(., SName = start.station.name, start.station.latitude, start.station.longitude)
EndYYY = yyy %>% select(., SName = end.station.name, end.station.latitude, end.station.longitude)
View(faithful1)
StationNameYYY = full_join(StartYYY, EndYYY, by = "SName")
View(StationNameYYY)
StationNameYYY = full_join(StartYYY, EndYYY, by = "SName") %>% distinct()
View(StationNameYYY)
yyy = Citi_Bike_717 %>% select(., start.station.name, end.station.name, start.station.latitude,
start.station.longitude, end.station.latitude, end.station.longitude) %>%
distinct()
StartYYY = yyy %>% select(., SName = start.station.name, start.station.latitude, start.station.longitude)
EndYYY = yyy %>% select(., SName = end.station.name, end.station.latitude, end.station.longitude)
StationNameYYY = full_join(StartYYY, EndYYY, by = "SName") %>% distinct()
View(StationNameYYY)
yyy = Citi_Bike_717 %>% select(., start.station.name, end.station.name, start.station.latitude,
start.station.longitude, end.station.latitude, end.station.longitude) %>% distinct()
StartYYY = yyy %>% select(., SName = start.station.name,
start.station.latitude, start.station.longitude)
EndYYY = yyy %>% select(., SName = end.station.name,
end.station.latitude, end.station.longitude)
StationNameYYY = full_join(StartYYY, EndYYY, by = "SName") %>% distinct()
View(StationNameYYY)
yyy = Citi_Bike_717 %>% select(., start.station.name, end.station.name, start.station.latitude,
start.station.longitude, end.station.latitude, end.station.longitude) %>%
distinct()
StartYYY = yyy %>% select(., SName = start.station.name,
start.station.latitude, start.station.longitude)
EndYYY = yyy %>% select(., SName = end.station.name,
end.station.latitude, end.station.longitude)
StationNameYYY = full_join(StartYYY, EndYYY, by = "SName")
StationNameYYY = full_join(StartYYY, EndYYY, by = "SName") %>% distinct()
View(StationNameYYY)
runApp()
saveRDS(StationNameYYY, "StationNameYYY.RDS")
saveRDS(routes_map, "routes_map.RDS")
routes_map = readRDS("routes_map")
runApp()
runApp()
StartYYY = yyy %>% select(., SName = start.station.name,
Lat = start.station.latitude, Long = start.station.longitude)
StationNameYYY = full_join(StartYYY, EndYYY, by = "SName") %>% distinct()
saveRDS(StationNameYYY, "StationNameYYY.RDS")
StationNameYYY = readRDS("StationNameYYY.RDS")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
routes_map = rbind(
data.frame(routes) %>%
rename(., Station = start.station.name) %>%
tibble::rowid_to_column(var = 'group') %>%
inner_join(station_coord, by = "Station") %>%
select(., group, Lat, long, Station),
data.frame(routes) %>%
rename(., Station = end.station.name) %>%
tibble::rowid_to_column(var = 'group') %>%
inner_join(station_coord, by = "Station") %>%
select(., group, Lat, long)
routes_map = rbind(
data.frame(routes) %>%
rename(., Station = start.station.name) %>%
tibble::rowid_to_column(var = 'group') %>%
inner_join(station_coord, by = "Station") %>%
select(., group, Lat, long, Station),
data.frame(routes) %>%
rename(., Station = end.station.name) %>%
tibble::rowid_to_column(var = 'group') %>%
inner_join(station_coord, by = "Station") %>%
select(., group, Lat, long)
)
routes_map = rbind(
data.frame(routes) %>%
rename(., Station = start.station.name) %>%
tibble::rowid_to_column(var = 'group') %>%
inner_join(station_coord, by = "Station") %>%
select(., group, Lat, long, Station),
data.frame(routes) %>%
rename(., Station = end.station.name) %>%
tibble::rowid_to_column(var = 'group') %>%
inner_join(station_coord, by = "Station") %>%
select(., group, Lat, long)
)
routes_map = rbind(
data.frame(routes) %>%
rename(., Station = start.station.name) %>%
tibble::rowid_to_column(var = 'group') %>%
inner_join(station_coord, by = "Station") %>%
select(., group, Lat, long, Station),
data.frame(routes) %>%
rename(., Station = end.station.name) %>%
tibble::rowid_to_column(var = 'group') %>%
inner_join(station_coord, by = "Station") %>%
select(., group, Lat, long, Station)
)
saveRDS(routes_map, "routes_map.RDS")
routes_map = readRDS("routes_map.RDS")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?addAwesomeMarkers
