while(i < 2) {
while(j < 4) {
sumx = sumx + (my_maze[i, j] * my_vec[j])
j = j + 1
}
i = i + 1
}
sumx
my_maze[i, j] * my_vec[j]
sumx = sumx + (my_maze[i, j] * my_vec[j])
print(my_maze[i, j] * my_vec[j])
print(my_maze[i, j])
print(my_vec[j])
?matrix
for (row in 1:nrow(my_maze)) {
for(col in 1:ncol(my_maze)) {
print(my_maze[row, col])
}
}
for (row in 1:nrow(my_maze)) {
for(col in 1:ncol(my_maze)) {
#print(my_maze[row, col])
print(my_vec[col])
for (row in 1:nrow(my_maze)) {
for(col in 1:ncol(my_maze, my_vec)) {
#print(my_maze[row, col])
print(my_vec[col])
}
}
for (row in 1:nrow(my_maze)) {
for(col in 1:ncol(my_maze, my_vec)) {
print(my_maze[row, col])
print(my_vec[col])
}
}
for (row in 1:nrow(my_maze)) {
for(col in 1:ncol(my_maze)) {
print(my_maze[row, col])
print(my_vec[col])
}
}
for (row in 1:nrow(my_maze)) {
for(col in 1:ncol(my_maze)) {
print(my_maze[row, col])
}
}
for (row in 1:nrow(my_maze)) {
for(col in 1:ncol(my_maze)) {
print(my_maze[row, col]) c
for (row in 1:nrow(my_maze)) {
for(col in 1:ncol(my_maze)) {
print(my_maze[row, col])
}
}
for (row in 1:nrow(my_maze)) {
for(col in 1:ncol(my_maze)) {
print(my_maze[row, col])
print(my_vec[col])
}
}
sumx = 0
new_vex = c()
for (row in 1:nrow(my_maze)) {
for(col in 1:ncol(my_maze)) {
sumx = sumx + (my_maze[row, col] * my_vec[col])
}
}
my_vec = c(1:4)
my_maze = matrix(ncol = 4, nrow = 2, 1:8)
sumx = 0
new_vex = c()
i = 1
for (row in 1:nrow(my_maze)) {
for(col in 1:ncol(my_maze)) {
sumx = sumx + (my_maze[row, col] * my_vec[col])
new_vex[i] = sumx
}
sumx = 0
i = i + 1
}
my_vec = c(1:4)
my_maze = matrix(ncol = 4, nrow = 2, 1:8)
sumx = 0
new_vex = c()
i = 1
for (row in 1:nrow(my_maze)) {
for(col in 1:ncol(my_maze)) {
sumx = sumx + (my_maze[row, col] * my_vec[col])
new_vex[i] = sumx
}
sumx = 0
i = i + 1
}
print(new_vex)
median(c(1:4))
x = c(1:4)
sumx = 0
new_x = c()
for(i in x) {
val = abs(x[i] - median(x))
new_x[i] = val
i =+ 1
}
median(new_x)
MAD(x)
Names <- "John Andrew Thomas"
Names_vec = strsplit(Names, split = " ")
Names_vec
Names <- "John Andrew Thomas"
Names_vec = strsplit(Names, split = " ")
paste(Names_vec, c("gmail.com"), sep = "@", collapse = "; ")
Names <- "John Andrew Thomas"
Names_vec = strsplit(Names, split = " ")
Names_vec
paste(Names_vec, c("gmail.com"), sep = "@")
Names <- "John Andrew Thomas"
Names_vec = strsplit(Names, split = " ")
Names_vec
Names <- "John Andrew Thomas"
Names_vec = strsplit(Names, split = " ")
Names_vec
paste(Names_vec, c("gmail.com"))
Names <- "John Andrew Thomas"
Names_vec = strsplit(Names, split = " ")[[1]]
Names_vec
paste(Names_vec, c("gmail.com"))
Names <- "John Andrew Thomas"
Names_vec = strsplit(Names, split = " ")[[1]]
Names_vec
paste(Names_vec, c("gmail.com", sep = "@", collapse ="; "))
Names <- "John Andrew Thomas"
Names_vec = strsplit(Names, split = " ")[[1]]
Names_vec
paste(Names_vec, c("gmail.com"), sep = "@", collapse ="; ")
compare = function(t, w){
if(nchar(t) == nchar(w)) {
return("Equal Lentgth")
} else {
return("Not Equal Length")
}
}
t = "HSGHSDBJJFB"
w = "HELLO"
compare = function(t, w){
if(nchar(t) == nchar(w)) {
return("Equal Lentgth")
} else {
return("Not Equal Length")
}
}
t = "HSGHSDBJJFB"
w = "HELLO"
compare = function(t, w){
if(nchar(t) == nchar(w)) {
return("Equal Lentgth")
} else {
return("Not Equal Length")
}
}
print(compare)
t = "HSGHSDBJJFB"
w = "HELLO"
compare = function(t, w){
if (nchar(A, type="chars") == nchar(B,type="chars")) {
return("Equal Lentgth")
} else {
return("Not Equal Length")
}
}
print(compare)
t = "HSGHSDBJJFB"
w = "HELLO"
compare = function(t, w){
if (nchar(A, type="chars") == nchar(B,type="chars")) {
return("Equal Length")
} else {
return ("Not Equal Length")
}}
print(compare)
compares = function(t, w){
if (nchar(A, type="chars") == nchar(B,type="chars")) {
return("Equal Length")
} else {
return ("Not Equal Length")
}}
print(compares)
t = "HSGHSDBJJFB"
w = "HELLO"
compares = function(t, w){
if (nchar(A, type="chars") == nchar(B,type="chars")) {
return("Equal Length")
} else {
return ("Not Equal Length")
}}
print(compares(t,w))
t = "HSGHSDBJJFB"
w = "HELLO"
compares = function(t, w){
if (nchar(t, type="chars") == nchar(w,type="chars")) {
return("Equal Length")
} else {
return ("Not Equal Length")
}}
print(compares(t,w))
?sapply
c(outer(letters[1:5], letters[1:5], FUN=paste, sep=""))
library(ggplot2)
library(dplyr)
NYC_Jobs = read.csv("NYC_Jobs.csv", stringsAsFactors = FALSE)
transformy = function(x) {
if(x == "Hourly") {
return(2080)
}else if (x == "Daily") {
return(260)
}else {
return(1)
}
}
NYC_Jobs$Salary.Range.From = as.numeric(NYC_Jobs$Salary.Range.From)
Corrected_jobs = NYC_Jobs %>%
mutate(., NSalary.Frequency = sapply(Salary.Frequency, transformy)) %>%
mutate(., NSalary.Range.From = Salary.Range.From * NSalary.Frequency,
NSalary.Range.To = Salary.Range.To * NSalary.Frequency)
MeanMedian = Corrected_jobs %>% group_by(., Agency) %>%
summarise(., avglow = mean(NSalary.Range.From),
avghigh = mean(NSalary.Range.To),
medianlow = median(NSalary.Range.From),
medianhigh = median(NSalary.Range.To))
#2.
MaxMean = Corrected_jobs %>% group_by(., Agency) %>%
summarise(., MeanSalLow = mean(NSalary.Range.From)) %>%
top_n(1, MeanSalLow)
MaxMean
#3
SRange = Corrected_jobs %>% na.omit() %>% mutate(., SalaryRange = NSalary.Range.To- NSalary.Range.From) %>%
group_by(., Posting.Type) %>%
summarise(., mean(SalaryRange))
SRange
#4
Corrected_jobs %>% mutate(.,SalaryRange=Salary.Range.To-Salary.Range.From) %>%
group_by(Level) %>%
summarise(AvgSalRange = mean(SalaryRange)) %>%
arrange(desc(AvgSalRange))
#5
mutate(Corrected_jobs,
TotalSalaryLow = X..Of.Positions*Salary.Range.From,
TotalSalaryHigh = X..Of.Positions*Salary.Range.To) %>%
group_by(Agency) %>%
summarise(min_expenses=sum(TotalSalaryLow),
max_expenses=sum(TotalSalaryHigh))
#6
Corrected_jobs %>% mutate(SalRange=Salary.Range.To - Salary.Range.From) %>%
group_by(Civil.Service.Title) %>%
summarise(MaxSalRange=max(SalRange)) %>%
arrange(desc(MaxSalRange))
mutate(Corrected_jobs,
TotalSalaryLow = X..Of.Positions*Salary.Range.From,
TotalSalaryHigh = X..Of.Positions*Salary.Range.To) %>%
group_by(Agency) %>%
summarise(min_expenses=sum(TotalSalaryLow),
max_expenses=sum(TotalSalaryHigh))
NYC_Jobs = read.csv("NYC_Jobs.csv", stringsAsFactors = FALSE)
Corrected_jobs = mutate(Corrected_jobs,
TotalSalaryLow = X..Of.Positions*Salary.Range.From,
TotalSalaryHigh = X..Of.Positions*Salary.Range.To) %>%
group_by(Agency) %>%
summarise(min_expenses=sum(TotalSalaryLow),
max_expenses=sum(TotalSalaryHigh))
shiny::runApp('Desktop/flights-4/flights')
runApp('Desktop/flights-4/flights')
runApp('Desktop/flights-4/flights')
library(data.table)
runApp('Desktop/flights-4/flights')
faithdens = ggplot(data = faithful1, aes(x = Lngth, y = eruptions)) + geom_density(aes(color = waiting))
data("faithful")
#1
faithful1 = faithful
faithdens = ggplot(data = faithful1, aes(x = Lngth, y = eruptions)) + geom_density(aes(color = waiting))
faithdens
faithful1 = faithful
length_fun = ifelse(faithful1$eruptions < 3.2, "short", "long")
faithful1 = faithful1 %>% mutate(., Lngth = length_fun)
faithdens = ggplot(data = faithful1, aes(x = Lngth, y = eruptions)) + geom_density(aes(color = waiting))
faithdens
faithdens = ggplot(data = faithful1, aes(x = Lngth, y = eruptions)) + geom_density(aes(color = waiting))
faithdens
faithbox = ggplot(data = faithful1, aes(x= Lngth, y = eruptions)) + geom_boxplot()
faithbox
faithdens = ggplot(data = faithful1, aes(x = Lngth)) + geom_density(aes(color = waiting))
faithdens
faithdens = ggplot(data = faithful1, aes(x = eruption)) + geom_density(aes(color = waiting))
faithdens
faithdens = ggplot(data = faithful1, aes(x = eruptions)) + geom_density(aes(color = waiting))
faithdens
faithdens = ggplot(data = faithful1, aes(x = waiting)) + geom_density(aes(color = waiting))
faithdens
faithdens = ggplot(data = faithful1, aes(x = waiting)) + geom_density(aes(color = Lngth))
faithdens
data("faithful")
#1
faithful1 = faithful
length_fun = ifelse(faithful1$eruptions < 3.2, "short", "long")
faithful1 = faithful1 %>% mutate(., Lngth = length_fun)
faithful1
#2
faithbox = ggplot(data = faithful1, aes(x= Lngth, y = eruptions)) + geom_boxplot()
faithbox
#3
faithdens = ggplot(data = faithful1, aes(x = waiting)) + geom_density(aes(color = Lngth))
faithdens
load(url('https://s3.amazonaws.com/graderdata/Knicks.rda'))
load(url('https://s3.amazonaws.com/graderdata/Knicks.rda'))
View(data)
library(dplyr)
library(ggplot2)
?mutate
CL = read.csv('https://s3.amazonaws.com/graderdata/Champions.csv', stringsAsFactors=FALSE)
View(CL)
setwd("~/Desktop")
Citibike_Sep2017 = read.csv("JC-201709-citibike-tripdata.csv")
View(Citibike_Sep2017)
tail(Citibike_Sep2017, 5)
sapply(Citibike_Sep2017, function(x) sum(is.na(x)))
temp_male = temp %>% filter(., Gender == "Male")
library(dplyr)
temp_male = temp %>% filter(., Gender == "Male")
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
library(dplyr)
#1
#structered data, Gender-column is nomimal data. numeric/interval Variables: temperatur. numeric/ratio variable: heart rate. heart rate categories f/m. Gender female 1 male 0. mean, median, mode, max, min, range, quartiles/percentiles, variance, sd, coefficient, determination, skewness, kurtosis, numbr of count. bivartiate data summary statistics linear correlation, chi-squared, or p-value based ztest, ttest, analysis of variance
temp_male = temp %>% filter(., Gender == "Male")
#2
#univariate data: boxplot & histogram. boxplot min, max, mean, median, quantiles & range. histogram: count, mode, varaince, sd, coefficient, skewness & kurtosis. Bivariate: scatterplot for relation between 2 variables. line chart for time series/has order.
temp_male
temp_female = temp %>% filter(., Gender == "Female")
temp_female
summary(temp)
summary(temp_male)
summary(temp_female)
range_temp = max(temp) - min(temp)
range_temp = max(temp$Body.Temp) - min(temp$Body.Temp)
range_temp
range_heart = max(temp$Heart.Rate) - min(temp$Heart.Rate)
range_heart
multi.fun <- function(x) {
c(mean = mean(x), median = median(x), var = var(x), sd = sd(x))
}
temp_variance = var(temp$Body.Temp)
temp_variance
temp_sd = sd(temp$Body.Temp)
temp_sd
temp_variance_Heart = var(temp$Heart.Rate)
temp_variance_Heart
temp_sd_heart = sd(temp$Heart.Rate)
temp_sd_heart
cor(temp, use = pairwise.complete.obs, pearson)
cor(temp, use = "pairwise.complete.obs", pearson)
cor(temp, use = "pairwise.complete.obs", "pearson")
#univariate data: boxplot & histogram. boxplot min, max, mean, median, quantiles & range. histogram: count, mode, varaince, sd, coefficient, skewness & kurtosis. Bivariate: scatterplot for relation between 2 variables. line chart for time series/has order.
library(ggplot2)
boxplot_temp
boxplot_temp = ggplot(data= temp, aes(x = Body.Temp)) + geom_boxplot()
boxplot_temp
boxplot_temp = ggplot(data= temp, aes(x = Body.Temp, y = count)) + geom_boxplot()
boxplot_temp
temp_boxplot = ggplot(data = temp, aes(x = Gender, y = Body.Temp)) + geom_boxplot()
temp_boxplot
Heart_boxplot = ggplot(data = temp, aes(x = Gender, y = Heart.Rate)) + geom_boxplot()
Heart_boxplot
Group_gender = temp %>% group_by(., Gender)
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
library(dplyr)
#1
#structered data, Gender-column is nomimal data. numeric/interval Variables: temperatur. numeric/ratio variable: heart rate. heart rate categories f/m. Gender female 1 male 0. mean, median, mode, max, min, range, quartiles/percentiles, variance, sd, coefficient, determination, skewness, kurtosis, numbr of count. bivartiate data summary statistics linear correlation, chi-squared, or p-value based ztest, ttest, analysis of variance
temp_male = temp %>% filter(., Gender == "Male")
temp_male
temp_female = temp %>% filter(., Gender == "Female")
temp_female
summary(temp)
summary(temp_male)
summary(temp_female)
range_temp = max(temp$Body.Temp) - min(temp$Body.Temp)
range_temp
range_heart = max(temp$Heart.Rate) - min(temp$Heart.Rate)
range_heart
#multi.fun <- function(x) {c(mean = mean(x), median = median(x), var = var(x), sd = sd(x))}
temp_variance = var(temp$Body.Temp)
temp_variance
temp_sd = sd(temp$Body.Temp)
temp_sd
temp_variance_Heart = var(temp$Heart.Rate)
temp_variance_Heart
temp_sd_heart = sd(temp$Heart.Rate)
temp_sd_heart
#2
#univariate data: boxplot & histogram. boxplot min, max, mean, median, quantiles & range. histogram: count, mode, varaince, sd, coefficient, skewness & kurtosis. Bivariate: scatterplot for relation between 2 variables. line chart for time series/has order.
library(ggplot2)
temp_boxplot = ggplot(data = temp, aes(x = Gender, y = Body.Temp)) + geom_boxplot()
temp_boxplot
Heart_boxplot = ggplot(data = temp, aes(x = Gender, y = Heart.Rate)) + geom_boxplot()
Heart_boxplot
Group_gender = temp %>% group_by(., Gender)
summary(temp)
summary(temp_male)
summary(temp_female)
t.statistic
?t.test
temp_boxplot = ggplot(data = temp, aes(x = Gender, y = Body.Temp)) + geom_boxplot()
temp_boxplot
#3
t.test(temp$Body.Temp, mu = 98.6, alternative = "greater")
#3
t.test(temp$Body.Temp, mu = 98.6, alternative = "less")
#3
t.test(temp$Body.Temp, mu = 98.6)
t.test(temp_female$Body.Temp, mu = 98.6)
#4
mean(temp_female$Body.Temp) - mean(temp_male$Body.Temp)
temp_diff
#4
temp_diff = mean(temp_female$Body.Temp) - mean(temp_male$Body.Temp)
temp_diff
t.test(temp_male$Body.Temp), mu = 98.6)
t.test(temp_male$Body.Temp), mu = 98.6)
t.test(temp_male$Body.Temp, mu = 98.6)
?var.test()
var.test(temp_female$Heart.Rate, temp_male$Heart.Rate)
mean(temp$Body.Temp)
#3
t.test(temp$Body.Temp, mu = 98.24923)
#3
t.test(temp$Body.Temp, mu = 98.6, alternative = "less")
#3
t.test(temp$Body.Temp, mu = 98.6)
t.test(temp_female$Body.Temp, mu = 98.6, alternative = "less")
mean(temp_male$Body.Temp)
t.test(temp_female$Body.Temp, mu = 98.10462, alternative = "less")
t.test(temp$Body.Temp - temp$Gender)
t.test(temp$Body.Temp ~ temp$Gender)
#3
t.test(temp$Body.Temp, mu = 98.6)
var.test(temp_female$Heart.Rate, temp_male$Heart.Rate)
#4
temp_diff = mean(temp_female$Body.Temp) - mean(temp_male$Body.Temp)
temp_diff
#4
t.test(temp_female$Body.Temp, temp_male$Body.Temp)
var.test(temp_female$Heart.Rate, temp_male$Heart.Rate, alternative = "less")
#3
t.test(temp$Body.Temp, mu = 98.6)
data("PlantGrowth")
View(PlantGrowth)
grouped_plants = PlantGrowth %>% group_by(., group)
plan_boxplot = ggplot(grouped_plants, aes(x = group, y = weight)) + geom_boxplot()
plan_boxplot
plant_boxplot
plant_boxplot = ggplot(grouped_plants, aes(x = group, y = weight)) + geom_boxplot()
plant_boxplot
#2
sd(grouped_plants)
#2
sd_trt1 = PlantGrowth %>% filter(., group == "trt1") %>% summarise(., sd)
#2
sd_trt1 = PlantGrowth %>% filter(., group == "trt1") %>% summarise(., sd())
summary(aov(weight ~ group))
summary(aov(PlantGrowth$weight ~ PlantGrowthgroup))
summary(aov(PlantGrowth$weight ~ PlantGrowth$group))
summary(aov(PlantGrowth$group ~ PlantGrowth$weight))
#4
t.test(temp_female$Body.Temp, temp_male$Body.Temp)
summary(aov(PlantGrowth$weight ~ PlantGrowth$group))
t.test(temp$Body.Temp, mu = 98.6)
var.test(temp_female$Heart.Rate, temp_male$Heart.Rate, alternative = "less")
#2
trt1 = PlantGrowth %>% filter(., group == "trt1")
crtl = PlantGrowth %>% filter(., group == "crtl")
trt2 = PlantGrowth %>% filter(., group = "trt2")
trt2 = PlantGrowth %>% filter(., group == "trt2")
sd(trt1)
summary(aov(PlantGrowth$weight ~ PlantGrowth$group))
bartlett.test(weight~group, PlantGrowth)
HairEyeColor
?mosaicplot
mosaicplot(HairEyeColor, shade = TRUE)
female_bebe = HairEyeColor %>% filter(., sex == "Female") %>% filter(., Eye == "Blue" | Eye == "Brown")
#2
class(HairEyeColor)
HairEyeColor[ ,1:2, 2]
female_bebe = HairEyeColor[ ,1:2, 2]
mosaicplot(female_bebe, shade = TRUE)
mosaicplot(HairEyeColor, shade = TRUE)
# blond hair + brown eyes. black hair.
# brown and blond are more evenly distributed.
chisq.test(HairEyeColor)
# brown and blond are more evenly distributed.
chisq.test(female_bebe)
# brown and blond are more evenly distributed.
chisq.test(female_bebe)
mosaicplot(HairEyeColor, shade = TRUE)
lass(HairEyeColor)
female_bebe = HairEyeColor[ ,1:2, 2]
mosaicplot(female_bebe, shade = TRUE)
female_blbr = HairEyeColor[ ,1:2, 2]
mosaicplot(female_blbr, shade = TRUE)
shiny::runApp('SHINY_project2018')
Citibike_Sep2017
library(leaflet)
install.packages("plotly")
runApp('SHINY_project2018')
runApp('SHINY_project2018')
install.packages("plotly")
shiny::runApp('~/Desktop/Shiny_Project')
